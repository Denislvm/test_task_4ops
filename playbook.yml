---
- name: Install Docker and Docker Compose with the nginx server
  hosts: all
  become: yes
  remote_user: devops_user
  vars:
    arch_mapping:  # Map ansible architecture {{ ansible_architecture }} names to Docker's architecture names
      x86_64: amd64
      aarch64: arm64
    http_port: 80
    https_port: 443

  tasks:
    - name: Update and upgrade all packages to the latest version
      ansible.builtin.apt:
        update_cache: true
        upgrade: dist
        cache_valid_time: 3600

    - name: Install required packages
      ansible.builtin.apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - software-properties-common

    - name: Create directory for Docker's GPG key
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Docker's official GPG key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        keyring: /etc/apt/keyrings/docker.gpg
        state: present

    - name: Print architecture variables
      ansible.builtin.debug:
        msg: "Architecture: {{ ansible_architecture }}, Codename: {{ ansible_lsb.codename }}"

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: >-
          deb [arch={{ arch_mapping[ansible_architecture] | default(ansible_architecture) }}
          signed-by=/etc/apt/keyrings/docker.gpg]
          https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable
        filename: docker
        state: present

    - name: Install Docker and related packages
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
        update_cache: true
      loop:
        - docker-ce
        - docker-ce-cli
        - containerd.io
        - docker-buildx-plugin
        - docker-compose-plugin
    
    - name: Enable and start Docker services
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: true
        state: started
      loop:
        - docker.service
        - containerd.service 
    
    - name: Install docker-compose
      ansible.builtin.get_url:
        url: https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: '0755'
        force: yes

    - name: Create Docker Compose directory
      ansible.builtin.file:
        path: /opt/nginx
        state: directory
        mode: '0755'

    - name: Create Docker Compose file
      ansible.builtin.copy:
        dest: /opt/nginx/docker-compose.yml
        content: |
          version: '3.8'
          services:
            nginx:
              image: nginx:latest
              ports:
                - "{{ http_port }}:80"
                - "{{ https_port }}:443"

    - name: Start Nginx container with Docker Compose
      ansible.builtin.command:
        cmd: docker-compose up -d
        chdir: /opt/nginx
      register: docker_compose_result
      ignore_errors: yes

    - name: Install UFW 
      ansible.builtin.apt:
        name: ufw
        state: present

    - name: Allow HTTP and HTTPS ports through the firewall
      ansible.builtin.ufw:
        rule: allow
        port: "{{ item }}"
      loop:
        - "{{ http_port }}"
        - "{{ https_port }}"

    - name: Enable UFW
      ansible.builtin.ufw:
        state: enabled
        policy: allow

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes

    - name: Install pip for python3
      ansible.builtin.apt:
        name: python3-pip
        state: present
        update_cache: yes
        
    - name: Upgrade pip to the latest version
      ansible.builtin.pip:
        name: pip
        state: latest
        executable: /usr/bin/pip3
  
    - name: Upgrade psutil module using pip
      ansible.builtin.command:
        cmd: sudo pip install --upgrade psutil

    - name: Ensure the Python script is executable
      ansible.builtin.file:
        path: script_cpu_usage.py
        mode: '0755'

    - name: Schedule CPU usage logging script
      ansible.builtin.cron:
        name: "Log CPU usage"
        minute: "*/5"
        job: "/usr/bin/python3 /home/devops_user/ansible-playbook/script_cpu_usage.py"
        user: devops_user
      become: yes
